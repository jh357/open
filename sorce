버전 관리
시간 흐름에 따라 파일 집합에 대한 변경 사항을 추적, 관리 

필요성
과거 지점의 버전으로 돌아가 누가 무엇을 수정했는지 파악 가능 

인터페이스 방식
CLI : 명령어 줄 인터페이스 방식
텍스트로 입력하고 결과도 텍스트로 표시
GUI
마우스와 텍스트로 명령을 입력라고 결과가 표시 

커밋 : 저장소의 현 상태를 저장 

HEAD : 가장 최근의 커밋을 가리키는 포인터 

저장소(Git repository) : 파일을 저장


push : 서버인 원격저장소로 올리기
작업한 내용을 공개할때 업로드
pull : 지역 저장소로 내리기
반대로 파일을 지역 저장소로 가져옴


GIT 깃
2005년 리누스 토발즈 개발한 버전 관리 시스템 

장점 : 모든 개발자는 지역 시스템에 코드 전체 사본 소유 

기능
여러 개발자가 함께 작업 가능
코드의 변경 사항 추적
코드 관리에 분산 버전 제어 도구 사용
여러 개의 평행 분기를 통해 비선형 개발 지원 

저장소 구조
작업 디렉토리, 작업 공간, 작업 트리, 스테이징 영역, 깃 저장소, 임시 저장소
Add 명령:Working directory -> Staging Area
Commit 명령 : Staging -> Git repository 

브랜치
새로운 수정을 할수 있는 또다른버전의 작업 흐름 

Github 깃허브
버전 관리를 위한 서버 저장소 및 프로젝트 개발을 위한 협업 관리 서비스 

깃 설정
명령 구조
$ git config 설정범위 설정변수 설정값 

깃 저장소 생성 방법
$ git init
$ git init . 
(현재 디렉토리를 깃 저장소로 만들기 위해 사용)
$git init basic 
(현재 폴더 하부에 basic을 생성하고 깃 저장소로 만들기 위해 사용)
리눅스 명령 

폴더 관련 명령
$ pwd (Print Working Directory)
현재 폴더 표시 

$ cd (Change Directory) 

$ mkdir dname (Make Directory) 

$ is (File or folder list)
-l : 파일의 상세정보
-a : 숨김 파일 표시
-al : 위 두개를 조합







파일 관련 명령
$ touch fname
빈 파일 fname 생성 

표준 출력으로 표시 echo
$ echo gut bash
$ echo 'print()'
문자열을 컴퓨터 터미널에 출력 

$ cat fname
파일 내용 보이기 

$ cp a b
파일 a를 b로 복사 

$ mv f1 f2
파일 f1을 f2로 이름 수정 

$ rm fname 
파일 fname 삭제
$ rm -rm dname
-f : 강제로 파일이나 디렉토리 삭제
-r : 디렉토리 내부의 모든 내용 삭제 

is -l
파일의 삭제정보
is -a
숨김 파일 표시
is -t
파일들을 최신순으로 표시
is -rt 
파일들을 과거순으로 표시
is -f
파일 표시 시 마지막 유형에 나타내는 파일명을 끝에 표시
'/' : 디렉터리
'*' : 실행파일
'@' : 링크




cat (Concatenate)
파일의 내용을 화면에 출력
more : 페이지별로 출력
head : 처음부터 10번째 줄까지만 출력
tail 끝에서부터 10번째 줄까지만 출력 

Redirection 명령어 연산
'>' : 기존에 있던 파일 내용 지우규 저장
'>>' : 기존 파일 내용 뒤에 덧붙여서 저장
'<' : 파일의 데이터를 명령에 입력











로그
저장소 생성
$ git init basic 

깃 저장소에 저장
$ git add, commit 

모두 커밋 이력 보기
$ git log 

측정한 커밋 이력 보기
$ git show [HEAD] 

바로 이전 버전으로 가기
$ git checkout HEAD~ 

다시 최신 버전으로 돌아오기
$ git checkout main 

다시 checkout 이전으로 돌아오기
$ git checkout-
스테이징 영역 기준으로 작업 디렉토리 파일 비교
$ git diff 

깃 저장소 기준으로 스테이징 영역 파일 비교
$ git diff --staged HEAD 

깃 저장소 기준으로 디렉토리 파일 비교
$ git diff HEAD
$ git diff HEAD~ 

파일 삭제 rm
작업 디렉토리에서 파일 삭제
$ rm f 

작업 디렉토리와 스테이징 영역에서 파일 삭제
$ git rm f 

스테이징 영역에서만 삭제
$ git rm --cached f


스테이징 영역의 상태를 작업 디렉토리에 복원
$ git restore f 

깃 저장소 상태를 스테이징 영역에 복원
$ git restore --staged f 

깃 저장소 상태를 작업 디렉토리에 복원
$ git restore --source=HEAD --worktree f
$ git restore --source=HEAD f 

깃 저장소 상태를 스테이징 영역과 작업 디렉토리에 함께 복원
$ git restore --source=HEAD --staged --worktree f 

파일 복구
$ git restore f
파일 f를 스테이징 영역에서 작업 폴더에 복원 

$ git restore --staged f 
파일 f를 깃 저장소에서 스테이징 영역에 복원
$ git restore --source=HEAD --worktree f
파일f를 깃저장소의HEAD에서 작업 폴더에 복원 

$ git restore --source=HEAD --staged --worktree f
파일 f를 깃 저장소의 HEAD에서 스테이징 영역과 작업 폴더에 복원 

태그 생성
$ git tag v 

태그 정보
$ git show 

태그 목록
$ git tag 

태그 삭제
$ git tag -d


$ git branch 
저장소 목록 보기 

$ git branch <new-branch>
저장소 생성만 

$ git checkout -b <new-branch>
git switch -c <new-branch>
저장소 생성하고 이동 

git branch -d branch-name
저장소 삭제
$ git branch -D branch-name
저장소 삭제, 강제 삭제 

원격 저장소 복제
$ git clone
원격 저장소 수정 사항 pull로 지역 저장소로 가져오기
$ git pull origin main
$ git pull
원격 저장소 수정사항 fetch로 지역 저장소로 가져와 병합하기
$ git fetch origin main
$ git fetch
$ git merge origin/main 

지역 저장소 push로 원격저장소 보내기
$ git push origin main
$ git push
